# -*- coding: utf-8 -*-
"""time_series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nIfrrb3SoEDHn7S1ElLnQaXnRr6D-sib

# Alucar — Analisando as vendas
"""

import pandas as pd

pd.read_csv('alucar.csv').head()

alucar = pd.read_csv('alucar.csv')

print(f"Quantidade de linhas e colunas: {alucar.shape}")

print(f"Quantidade de dados nulos: {alucar.isna().sum().sum()}")

alucar['mes'] = pd.to_datetime(alucar['mes'])
alucar.dtypes

# Commented out IPython magic to ensure Python compatibility.
!pip install seaborn==0.9.0
import seaborn as sns
# %matplotlib inline
from matplotlib import pyplot as plt

sns.lineplot(x='mes', y='vendas', data=alucar)

sns.set_palette('Accent')
sns.set_style('darkgrid')
ax = sns.lineplot(x='mes', y='vendas', data=alucar)
ax.figure.set_size_inches(12,6)
ax.set_title('Vendas Alucar de 2017 e 2018', loc='left', fontsize=18)
ax.set_xlabel('Tempo (por trimestre)', fontsize=14)
ax.set_ylabel('Vendas(R$)', fontsize=14)
ax = ax

alucar['aumento'] = alucar['vendas'].diff()
alucar.head()

sns.set_palette('Accent')
sns.set_style('darkgrid')
ax = sns.lineplot(x='mes', y='aumento', data=alucar)
ax.figure.set_size_inches(12,6)
ax.set_title('Aumento das vendas da Alucar de 2017 e 2018', loc='left', fontsize=18)
ax.set_xlabel('Tempo (por trimestre)', fontsize=14)
ax.set_ylabel('Aumento', fontsize=14)
ax = ax

def plotar(titulo, labelx, labely, x, y, dataset):
  sns.set_palette('Accent')
  sns.set_style('darkgrid')
  ax = sns.lineplot(x=x, y=y, data=dataset)
  ax.figure.set_size_inches(12,6)
  ax.set_title(titulo, loc='left', fontsize=18)
  ax.set_xlabel(labelx, fontsize=14)
  ax.set_ylabel(labely, fontsize=14)
  ax = ax

plotar('Aumento das vendas da Alucar de 217 e 2018', 'Tempo (trimestral)', 'Aumento', 'mes', 'aumento', alucar)

alucar['aceleracao'] = alucar['aumento'].diff()
alucar.head()

plotar('Aceleração das vendas da Alucar de 2017 e 2018', 'Tempo (trimestral)', 'Aceleração', 'mes', 'aceleracao', alucar)

plt.figure(figsize=(16,12))
ax=plt.subplot(3,1,1)
ax.set_title('Análise de vendas da Alucar de 2017 e 2018', fontsize=18, loc='left')
sns.lineplot(x='mes', y='vendas', data=alucar)
plt.subplot(3,1,2)
sns.lineplot(x='mes', y='aumento', data=alucar)
plt.subplot(3,1,3)
sns.lineplot(x='mes', y='aceleracao', data=alucar)
ax = ax

def plot_comparacao(x, y1, y2, y3, dataset, titulo):
  plt.figure(figsize=(16,12))
  ax=plt.subplot(3,1,1)
  ax.set_title(titulo, fontsize=18, loc='left')
  sns.lineplot(x=x, y=y1, data=dataset)
  plt.subplot(3,1,2)
  sns.lineplot(x=x, y=y2, data=dataset)
  plt.subplot(3,1,3)
  sns.lineplot(x=x, y=y3, data=dataset)
  ax = ax

plot_comparacao('mes', 'vendas', 'aumento', 'aceleracao', alucar, 'Análise de vendas da Alucar de 2017 e 2018')

"""### Autocorrelação"""

from pandas.plotting import autocorrelation_plot

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação das vendas', fontsize=18, x=0.26, y=0.95)
autocorrelation_plot(alucar['vendas'])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação do aumento', fontsize=18, x=0.26, y=0.95)
autocorrelation_plot(alucar['aumento'][1:])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação da aceleração', fontsize=18, x=0.26, y=0.95)
autocorrelation_plot(alucar['aceleracao'][2:])
ax = ax

"""# Alucar — Analisando assinantes da newsletter"""

assinantes = pd.read_csv('newsletter_alucar.csv')
assinantes.head()

assinantes.dtypes

print(f"Quantidade de linhas e colunas: {assinantes.shape}")
print(f"Quantidade de dados nulos: {assinantes.isna().sum().sum()}")

assinantes['mes'] = pd.to_datetime(assinantes['mes'])
assinantes.dtypes

assinantes['aumento'] = assinantes['assinantes'].diff()
assinantes['aceleracao'] = assinantes['aumento'].diff()
assinantes.head()

plot_comparacao('mes', 'assinantes', 'aumento', 'aceleracao', assinantes, 'Análise de assinantes da newsletter')

"""# Chocolura — Analisando as vendas"""

chocolura = pd.read_csv('chocolura.csv')
chocolura.head()

chocolura.dtypes

chocolura['mes'] = pd.to_datetime(chocolura['mes'])
chocolura.dtypes

print(f"Quantidade de linhas e colunas: {chocolura.shape}")
print(f"Quantidade de dados nulos: {chocolura.isna().sum().sum()}")

chocolura['aumento'] = chocolura['vendas'].diff()
chocolura['aceleracao'] = chocolura['aumento'].diff()
chocolura.head()

plot_comparacao('mes', 'vendas', 'aumento', 'aceleracao', chocolura, 'Análise de vendas da Chocolura de 2017 a 2018')

"""# Chocolura — vendas diárias (Outubro e Novembro)"""

vendas_por_dia = pd.read_csv('vendas_por_dia.csv')
vendas_por_dia.head()

print(f"Quantidade de linhas e colunas: {vendas_por_dia.shape}")
print(f"Quantidade de dados nulos: {vendas_por_dia.isna().sum().sum()}")

vendas_por_dia.dtypes

vendas_por_dia['dia'] = pd.to_datetime(vendas_por_dia['dia'])
vendas_por_dia.dtypes

vendas_por_dia['aumento'] = vendas_por_dia['vendas'].diff()
vendas_por_dia['aceleracao'] = vendas_por_dia['aumento'].diff()
vendas_por_dia.head()

plot_comparacao('dia', 'vendas', 'aumento', 'aceleracao', vendas_por_dia, 'Análise de vendas de Outubro e Novembro (por dia) — Chocolura')

"""**Analisando a sazonalidade:**"""

vendas_por_dia['dia_da_semana'] = vendas_por_dia['dia'].dt.day_name()

vendas_por_dia.head()

vendas_por_dia['dia_da_semana'].unique()

dias_traduzidos = {'Monday' : 'Segunda', 
                   'Tuesday' : 'Terça', 
                   'Wednesday' : 'Quarta', 
                   'Thursday' : 'Quinta', 
                   'Friday' : 'Sexta', 
                   'Saturday' : 'Sábado',
                   'Sunday' : 'Domingo'}

vendas_por_dia['dia_da_semana'] = vendas_por_dia['dia_da_semana'].map(dias_traduzidos)
vendas_por_dia.head()

"""**Agrupando os dias:**"""

vendas_agrupadas = vendas_por_dia.groupby('dia_da_semana', sort=False)['vendas', 'aumento', 'aceleracao'].mean().round()

vendas_agrupadas

"""**Correlação das vendas diárias**"""

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação das vendas diárias', fontsize=18, x=0.3, y=0.95)
autocorrelation_plot(vendas_por_dia['vendas'])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação do aumento das vendas diárias', fontsize=18, x=0.35, y=0.95)
autocorrelation_plot(vendas_por_dia['aumento'][1:])
ax = ax

ax = plt.figure(figsize=(12,6))
ax.suptitle('Correlação da aceleração das vendas diárias', fontsize=18, x=0.35, y=0.95)
autocorrelation_plot(vendas_por_dia['aceleracao'][2:])
ax = ax

"""#Cafelura — Análise de vendas"""

cafelura = pd.read_csv('cafelura.csv')
cafelura.head()

cafelura.dtypes

cafelura['mes'] = pd.to_datetime(cafelura['mes'])
cafelura.dtypes

print(f"Quantidade de linhas e colunas: {cafelura.shape}")
print(f"Quantidade de dados nulos: {cafelura.isna().sum().sum()}")

plotar('Vendas da Cafelura de 2017 e 2018', 'tempo', 'vendas', 'mes', 'vendas', cafelura)

quantidade_de_dias_de_fds = pd.read_csv('dias_final_de_semana.csv')
quantidade_de_dias_de_fds.head()

quantidade_de_dias_de_fds['quantidade_de_dias'].values

cafelura['vendas_normalizadas'] = cafelura['vendas'] / quantidade_de_dias_de_fds['quantidade_de_dias'].values
cafelura.head()

plotar('Vendas normalizadas da Cafelura de 2017 a 2018', 'Tempo', 'Vendas normalizadas', 'mes', 'vendas_normalizadas', cafelura)

plt.figure(figsize=(16,12))
ax = plt.subplot(2, 1, 1)
ax.set_title('Vendas Cafelura 2017 e 2018', fontsize=18)
sns.lineplot(x='mes', y='vendas', data=cafelura)
ax=plt.subplot(2, 1, 2)
ax.set_title('Vendas normalizadas Cafelura', fontsize=18)
sns.lineplot(x='mes', y='vendas_normalizadas', data=cafelura)
ax = ax

"""#Statsmodels"""

from statsmodels.tsa.seasonal import seasonal_decompose

resultado = seasonal_decompose([chocolura['vendas']], freq=3)
ax = resultado.plot()

observacao = resultado.observed
tendencia = resultado.trend
sazonalidade = resultado.seasonal
ruido = resultado.resid

data = ({
    'observacao' : observacao,
    'tendencia' : tendencia,
    'sazonalidade' : sazonalidade,
    'ruido' : ruido
})
resultado = pd.DataFrame(data)
resultado.head()

plot_comparacao(resultado.index, 'observacao', 'tendencia', 'sazonalidade', resultado, 'Exemplo de Statsmodels')

"""# Alucel — Análise de vendas"""

alucel = pd.read_csv('alucel.csv')
alucel.head()

alucel.dtypes

alucel['dia'] = pd.to_datetime(alucel['dia'])
alucel.dtypes

print(f"Quantidade de linhas e colunas: {alucel.shape}")
print(f"Quantidade de dados nulos: {alucel.isna().sum().sum()}")

alucel['aumento'] = alucel['vendas'].diff()
alucel['aceleracao'] = alucel['aumento'].diff()

alucel.head()

plot_comparacao('dia', 'vendas', 'aumento', 'aceleracao', alucel, 'Análise de vendas da Alucel de Outubro e Novembro de 2018')

"""**Média móvel:**"""

alucel['media_movel'] = alucel['vendas'].rolling(7).mean()

alucel.head(7)

plotar('Análise de vendas com média móvel de 7 dias', 'Tempo', 'Média móvel', 'dia', 'media_movel', alucel)

alucel['media_movel_21'] = alucel['vendas'].rolling(21).mean()

plotar('Análise de vendas com média móvel de 21 dias', 'Tempo', 'Média móvel', 'dia', 'media_movel_21', alucel)

plot_comparacao('dia', 'vendas', 'media_movel', 'media_movel_21', alucel, 'Comparando as vendas com médias móveis')

